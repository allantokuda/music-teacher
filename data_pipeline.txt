Pipeline:

- use Tone.js to get FFT.

- Microphone -> raw audio (amplitude at each time in a sample window)
  { samples: [{ time: 0.253, amplitude: 1.2345 }, ... ] }

- Tone.Analyser -> momentary FFT (gain at each of 16384 frequencies)
  { frequencies: [{ freq: 12.5, gain: -20.2 }, ...16383 other frequencies ] }

- Peak finder -> momentary peak set (gain at each of ~50 peak frequencies)
  { frequencies: [{ freq: 200.5, gain: -20.2 }, ... ~20 other peak frequencies ] }

- Moving window aggregator -> window of momentary peak sets (gain at each of ~50 peak frequencies at each of ~10 steps in window)
  {
    time_steps: [
      { step: 1, frequencies: [{ freq: 200.5, gain: -20.2 }, ... ~20 other peak frequencies ] },
      { step: 2, frequencies: [{ freq: 200.4, gain: -18.5 }, ... ~20 other peak frequencies ] },
      ...
    ]
  }

- Peak tracker -> peak track set (rep freq and each (time step / gain pair) at each of ~10 representative frequencies)
  {
    peak_tracks: [
      {
        representative_freq: 200.5,
        time_steps: [
          { step: 1, gain: -20.2 },
          ... other time steps in same track
        ]
      },
      ... other tracks
    ]
  }

- Track clustering -> peak track cluster set (gain at each of ~5 clusters of ~5 representative frequencies x ~20 time steps)
  (cluster based on overlapping/similiar gain evolution shape over several time steps)

  {
    peak_track_clusters: [
      {
        peak_tracks: [
          {
            representative_freq: 200.5,
            time_steps: [
              { step: 1, gain: -20.2 },
            ]
          },
          ... other peak tracks in same cluster
        ]
      },
      ... ~2-5 other other clusters
    ]
  }

- Cluster gain shape aggregator ->
  {
    peak_track_clusters: [
      {
        gain_shape: [
          { time: 1, gain: -20.2 },
          ...
        ]
        representative_frequencies: [
          { freq: 200.5, relative_gain: -12.5 },
          { freq: 401.0, relative_gain: -22.3 },
          ...
        ]
      }
      ... ~2-5 other clusters
    ]
  }

- Attack filter -> choose clusters that have an "attack" gain shape
  (same as previous shape but most clusters removed)

- Cluster chord identification: chord set (chord name and match probability for each of ~5 clusters x ~5 representantive frequencies)
  (identify matching chords for each cluster, and match probability

  {
    peak_track_clusters: [
      {
        matching_chords: [
          { chord: 'C7', probability: 0.75 },
          { chord: 'Cm7', probability: 0.42 }
          ... ~7 other matches
        ]
      },
      ... other clusters
    ]
  }

- Decision: is there a winning chord or not? And if there is, which chord is it?
  - Only a winner if there is a strong winner across all matches and all clusters.
  - May be no winner (silent, tie, or indeterminate)
